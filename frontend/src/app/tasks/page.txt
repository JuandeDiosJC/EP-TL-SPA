"use client";
import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { fetchTasks, createTask, deleteTask, updateTask } from "../../services/api";

export default function TasksPage() {
  const [tasks, setTasks] = useState([]);
  const [newTaskTitle, setNewTaskTitle] = useState("");
  const [editingTaskId, setEditingTaskId] = useState(null);
  const [editedTaskTitle, setEditedTaskTitle] = useState("");
  const [isLoading, setIsLoading] = useState(true);
  const router = useRouter();

  useEffect(() => {
    const token = localStorage.getItem("token");
    if (!token) {
      // Si no hay token, redirige a login
      router.push("/login");
      return;
    }

    fetchTasks(token)
      .then((data) => {
        setTasks(data);
        setIsLoading(false);
      })
      .catch((err) => {
        console.error(err);
        setIsLoading(false);
      });
  }, [router]);

  // Crear tarea
  const handleCreateTask = async () => {
    const token = localStorage.getItem("token");
    if (!token) {
      // Si por alguna razón se dispara esta función sin token, redirige
      router.push("/login");
      return;
    }
    if (!newTaskTitle.trim()) return;
    try {
      const newTask = await createTask({ title: newTaskTitle }, token);
      setTasks((prevTasks) => [...prevTasks, newTask]);
      setNewTaskTitle("");
    } catch (err) {
      console.error("Error al crear la tarea", err);
    }
  };

  // Eliminar tarea
  const handleDeleteTask = async (taskId) => {
    const token = localStorage.getItem("token");
    try {
      await deleteTask(taskId, token);
      setTasks((prevTasks) => prevTasks.filter((task) => task._id !== taskId));
    } catch (err) {
      console.error("Error al eliminar la tarea", err);
    }
  };

  // Iniciar edición: se carga el título actual en el estado local
  const handleEditTask = (task) => {
    setEditingTaskId(task._id);
    setEditedTaskTitle(task.title);
  };

  // Cancelar edición
  const handleCancelEdit = () => {
    setEditingTaskId(null);
    setEditedTaskTitle("");
  };

  // Guardar edición
  const handleSaveEdit = async (taskId) => {
    const token = localStorage.getItem("token");
    try {
      const updatedTask = await updateTask(taskId, { title: editedTaskTitle }, token);
      setTasks((prevTasks) =>
        prevTasks.map((task) => (task._id === taskId ? updatedTask : task))
      );
      setEditingTaskId(null);
      setEditedTaskTitle("");
    } catch (err) {
      console.error("Error al actualizar la tarea", err);
    }
  };

  // Cambiar estado de la tarea (toggle entre "pending" y "completed")
  const handleToggleStatus = async (task) => {
    const token = localStorage.getItem("token");
    const newStatus = task.status === "pending" ? "completed" : "pending";
    try {
      const updatedTask = await updateTask(task._id, { title: task.title, status: newStatus }, token);
      setTasks((prevTasks) =>
        prevTasks.map((t) => (t._id === task._id ? updatedTask : t))
      );
    } catch (err) {
      console.error("Error al cambiar el estado de la tarea", err);
    }
  };

  return (
    <main className="p-4">
      <h1 className="text-2xl font-bold mb-4">Mis Tareas</h1>

      {/* Formulario para crear una nueva tarea */}
      <div className="mb-4">
        <input
          type="text"
          value={newTaskTitle}
          onChange={(e) => setNewTaskTitle(e.target.value)}
          placeholder="Nueva tarea..."
          className="border p-2 rounded mr-2"
        />
        <button onClick={handleCreateTask} className="bg-blue-500 text-white p-2 rounded">
          Agregar Tarea
        </button>
      </div>

      {/* Listado de tareas */}
      <div>
        {tasks.length === 0 ? (
          <p>No hay tareas.</p>
        ) : (
          tasks.map((task) => (
            <div
              key={task._id}
              className="border p-2 mb-2 flex justify-between items-center"
            >
              <div>
                {editingTaskId === task._id ? (
                  <>
                    <input
                      type="text"
                      value={editedTaskTitle}
                      onChange={(e) => setEditedTaskTitle(e.target.value)}
                      className="border p-1"
                    />
                    <button
                      onClick={() => handleSaveEdit(task._id)}
                      className="bg-green-500 text-white p-1 rounded ml-2"
                    >
                      Guardar
                    </button>
                    <button
                      onClick={handleCancelEdit}
                      className="bg-gray-500 text-white p-1 rounded ml-2"
                    >
                      Cancelar
                    </button>
                  </>
                ) : (
                  <>
                    <h2 className="text-lg">{task.title}</h2>
                    <p>Estatus: {task.status}</p>
                  </>
                )}
              </div>
              <div>
                {editingTaskId !== task._id && (
                  <>
                    <button
                      onClick={() => handleEditTask(task)}
                      className="bg-yellow-500 text-white p-2 rounded mr-2"
                    >
                      Editar
                    </button>
                    <button
                      onClick={() => handleToggleStatus(task)}
                      className="bg-blue-500 text-white p-2 rounded mr-2"
                    >
                      Cambiar Estado
                    </button>
                    <button
                      onClick={() => handleDeleteTask(task._id)}
                      className="bg-red-500 text-white p-2 rounded"
                    >
                      Eliminar
                    </button>
                  </>
                )}
              </div>
            </div>
          ))
        )}
      </div>
    </main>
  );
}
